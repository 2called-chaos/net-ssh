To send data to a remote process' standard input, use the @Channel#send_data@ method. Consider the following silly example, which prints the numbers 1 through 10 by echoing them on the remote host:

<h:code lang="ruby">
require 'net/ssh'

Net::SSH.start('host.com', 'bob') do |ssh|
  ssh.exec!("echo 1; cat") do |channel, type, data|
    puts "echoed: #{data}"

    channel[:number] ||= data.to_i
    channel[:number] += 1

    if channel[:number] > 10
      channel.close
    else
      channel.send_data("#{channel[:number]}\n")
    end
  end
end
</h:code>

The above works by "seeding" the process with the number 1 ("echo 1") and then just echoing whatever gets sent to stdin ("cat"). The first time through, the output from "echo 1" arrives, which gets displayed. We then initialize a custom property on the channel, @:number@, and increment it. Then, we use @Channel#send_data@ to send the new number to the server.

The server, by this time, is running @cat@, which will receive the new number on stdin, and echo it. This passes it back to the client, which increments, and sends it back, ping-pong style, until the number is greater than 10, at which time we close the channel and terminate the loop.