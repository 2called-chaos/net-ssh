If you ever need to tunnel an SSH connection through an obliging HTTP proxy, you just need to instantiate the HTTP proxy object with the appropriate parameters, and pass it in via the @:proxy@ option:

<h:code lang="ruby">
require 'net/ssh'
require 'net/ssh/proxy/http'

proxy = Net::SSH::Proxy::HTTP.new("my.proxy.com", 8080)

Net::SSH.start("host.com", "bob", :proxy => proxy) do |ssh|
  # ...
end
</h:code>

If the proxy requires authentication, you can pass the user-name and password as options to the proxy constructor. (Note: only HTTP Basic authentication is supported at this time.)

<h:code lang="ruby">
require 'net/ssh'
require 'net/ssh/proxy/http'

proxy = Net::SSH::Proxy::HTTP.new("my.proxy.com", 8080,
  :user => "bob", :password => "proxypass")

Net::SSH.start("host.com", "bob", :proxy => proxy) do |ssh|
  # ...
end
</h:code>
